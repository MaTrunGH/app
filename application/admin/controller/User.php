<?php
namespace app\admin\controller;
use app\admin\controller\Base;
use app\admin\model\UUser;
use think\Request;

class User extends Base{

    protected $model;
    protected $request;
    protected $param;

    protected $beforeActionList = [
        'permission' => ['except' => 'login,loginview']
    ];

    protected function permission(){
        parent::permission(); // TODO: Change the autogenerated stub
        $this->param = $this->request->param();
        $this->model = new UUser($this->ad_uid);
    }

    public function login($username, $password){
    	try {
			$result     = $this->model->login($username, $password);
			if ($result) {
				return json_encode(['code' => 200, 'msg' => '成功', 'data' => $result]);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
    	} catch (\Exception $e) {
    		return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
    	}
    }

    public function loginView(){
    	return $this->fetch();
    }

    /**
	 * 添加用户
	 */
	public function createUser($username, $mobile = '',$avatar = null){
		try {
			if ($this->model->where(['user_name' => $username])->find()) {
				throw new \Exception("账号名已存在", 400);
			}
			$data = [
				'uid'         => createUniqid(),
				'user_name'   => $username,
				'password'    => md5("123456"), 
				'mobile'      => $mobile,
				'status'      => 1,
				'avatar'      => $avatar,
				'create_time' => time()
			];
			if ($this->model->where(['uid' => $data['uid']])->find()) {
				$data['uid'] = createUniqid();
			}
			$result = $this->rbac->createUser($data);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $result, '添加管理员');
				return json_encode(['code' => 200, 'msg' => '成功']);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	public function editUser($id, $password, $mobile, $status, $avatar = null){
		try {
			$result     = $this->model->edit($id, $password, $mobile, $status, $avatar);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $id, '编辑管理员');
				return json_encode(['code' => 200, 'msg' => '成功']);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
    	}
	}

	public function createRole($name, $parent_id, $description, $status){
		try {
			$sort_num  = db("u_role")->max("sort_num")+1;
			$data = [
				'name'        => $name,
				'status'      => $status,
				'description' => $description,
				'sort_num'    => $sort_num,
				'parent_id'   => $parent_id
			];
			$result = $this->rbac->createRole($data);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $result, '创建角色');
				return json_encode(['code' => 200, 'msg' => '成功']);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	public function editRole($id, $name, $status, $description, $parent_id){
		try {
			$data = [
				'id'		  => $id,
				'name'        => $name,
				'status'      => $status,
				'description' => $description,
				'parent_id'   => $parent_id
			];
			$result = $this->rbac->editRole($data);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $id, '编辑角色');
				return json_encode(['code' => 200, 'msg' => '成功']);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	public function delRole($id){
		try {
			$result = $this->rbac->delRole($id);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $id, '删除角色');
				return json_encode(['code' => 200, 'msg' => '成功']);
			}else{
				return json_encode(['code' => 400, 'msg' => '失败']);
			}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	private $permission_classify = [
		'admin/admin'   => 1,
		'admin/user'    => 2,
		'admin/service' => 3
	];

	public function createPression($name, $status = 1, $description = '', $path){
		try {
			if (!$name) {
				throw new \Exception("参数name不能为空", 400);
			}
			if (!$path) {
				throw new \Exception("参数path不能为空", 400);
			}
			if (db("u_permission")->where(['path' => $path])->find()) {
				throw new \Exception("该权限已创建,请勿重复提交", 400);
			}
			$path_arr = explode('/', $path);
			$classify_id = 0;
			if (count($path_arr) == 3) {
				foreach ($this->permission_classify as $key => $value) {
					if ($path_arr[0]."/".$path_arr[1] == $key) {
						$classify_id = $value;
						break;
					}
				}
			}else{
				throw new \Exception("参数path不符合规则", 400);
			}

			$subcode = db("u_permission")->where(['classify' => $classify_id])->max("subcode")+1;
			$data = [
				'name'        => $name,
				'status'      => $status,
				'description' => $description,
				'path'        => $path,
				'path_id'	  => $classify_id.$subcode,
				'classify'	  => $classify_id,
				'subcode'	  => $subcode,
				'create_time' => time()
			];
			$result = $this->rbac->createPermission($data);
			if ($result) {
				// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $result, '创建权限');
    			return json_encode(['code' => 200, 'msg' => '成功']);
    		}else{
    			return json_encode(['code' => 400, 'msg' => '失败']);
    		}
		} catch (\Exception $e) {
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	/**
	 * 分配权限
	 * @param  [type] $role_id    [description]
	 * @param  array  $permission [description]
	 * @return [type]             [description]
	 */
    public function assignPermission($role_id, array $permission){
    	try {
    		if (!$permission) {
    			throw new \Exception("参数permission不能为空", 400);
    		}
    		foreach ($permission as $key => $value) {
    			if (!db("u_permission")->where(['id' => $value])->find()) {
    				throw new \Exception("参数permission参数值有误或者不存在", 400);
    			}
    			if (db("u_role_permission")->where(['role_id' => $role_id, 'permission_id' => $value])->find()) {
    				unset($permission[$key]);
    			}
    		}
    		if (!$permission) {
    			throw new \Exception("权限已添加,请勿重复提交", 400);
    		}
			$result  = $this->rbac->assignRolePermission($role_id, $permission);
    		if ($result) {
    			// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $role_id, '分配权限');
    			return json_encode(['code' => 200, 'msg' => '成功']);
    		}else{
    			return json_encode(['code' => 400, 'msg' => '失败']);
    		}
    	} catch (\Exception $e) {
    		return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
    	}
    }

    /**
     * 删除权限
     * @param  [type] $permission_id [description]
     * @return [type]                [description]
     */
    public function delPermission($id){
    	try {
            $result  = $this->rbac->delPermission($id);
    		if ($result) {
    			// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $role_id, '删除权限');
    			return json_encode(['code' => 200, 'msg' => '成功']);
    		}else{
    			return json_encode(['code' => 400, 'msg' => '失败']);
    		}
        } catch (\Exception $e) {
            return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
        }
    }

    /**
     * 分配角色
     * @param  [type] $uid  [description]
     * @param  array  $role [description]
     * @return [type]       [description]
     */
	public function assignUserRole($uid, array $role){
		try {
			if (!$role) {
    			throw new \Exception("参数permission不能为空", 400);
    		}
    		foreach ($role as $key => $value) {
    			if (!db("u_role")->where(['id' => $value])->find()) {
    				throw new \Exception("参数role参数值有误或者不存在", 400);
    			}
    			if (db("u_user_role")->where(['uid' => $uid, 'role_id' => $value])->find()) {
    				unset($role[$key]);
    			}
    		}
    		if (!$role) {
    			throw new \Exception("权限已添加,请勿重复提交", 400);
    		}
            $result  = $this->rbac->assignUserRole($uid, $role);
    		if ($result) {
    			// AdLog::log($this->ad_uid,AdLog::USER_MANAGE, $uid, '分配用户角色');
    			return json_encode(['code' => 200, 'msg' => '成功']);
    		}else{
    			return json_encode(['code' => 400, 'msg' => '失败']);
    		}
        } catch (\Exception $e) {
            return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
        }
	}

	/*管理员列表*/
	public function getList($keywords = null, $date_time = null, $page = 0, $length = 10){	
		try{
			$this->view->engine->layout(false);
	        $list = $this->model->getList($keywords, $date_time, $page, $length);
	        $this->assign('list', $list);
	        return $this->fetch();
		}catch(\Exception $e){
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	public function permissionList($keywords = null, $page = 0, $length = 10){
		try{
			$where['name|path|description'] = ['like', '%'.$keywords.'%'];
			$result  = $this->rbac->getPermission($where);
			if ($result) {
    			return json_encode(['code' => 200, 'msg' => '成功', 'data' => $result]);
    		}else{
    			return json_encode(['code' => 400, 'msg' => '失败']);
    		}
		}catch(\Exception $e){
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}

	public function loginOut(){
		try{
			session('permission_name', null);
			return json_encode(['code' => 200, 'msg' => '成功']);
		}catch(\Exception $e){
			return json_encode(['code' => $e->getCode(), 'msg' => $e->getMessage()]);
		}
	}
}
